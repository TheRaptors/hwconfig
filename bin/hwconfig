#!/bin/bash
# H/W configuration gathering tool by Ralf yang.
# goody80762@gmail.com
#set -xv

OptionV=$1
OptionSub=$2

# For the ziinst package set value
nameserver1=8.8.8.8
nameserver2=168.126.63.1


Type="RAID|SCSI|Raid|SATA|Adaptec"
ListPCI=`./bin/lspci -v |egrep "$Type" |grep "Unknown"`
	if [[ $ListPCI != "" ]]
	then 
		Storage=`./bin/lspci -v |egrep "$Type" | awk -F ': ' '{print $2}' | head -1`
	else
		Storage=`./bin/lspci -v |egrep "$Type" | awk -F ': ' '{print $2}' | tail -1`
	fi


Dkk=`sudo fdisk -l 2> /dev/null | grep "^Disk" | cut -f 1 -d ',' | cut -f 3- -d '/' | sed -e 's/: /=/g' -e 's/ //g' |fgrep -v "identifier" `

# For the refreash the data
if [[ $OptionV = "-r" ]]
then 
	sudo sh -c "/usr/sbin/dmidecode  -t 0 -t 1 -t 3 -t 4 > ./var/dmidecode.list"
	sudo sh -c "/usr/sbin/dmidecode  -t 17 > ./var/dmidecode_meminfo.list"
fi

# for the help
if [[ $OptionV = "-h" ]] || [[ $OptionV = "--help" ]]
then 
	echo "====================================================================="
	echo " hwconfig <no options> 	for the normal view"
	echo " hwconfig -h or --help	for the help page"
	echo " hwconfig -r 		for the data refreash"
	echo " hwconfig -c 		for create an output data"
	echo " hwconfig -net 		for show the network status"
	echo "====================================================================="
	echo " hwconfig -check	for check the system configration"
	echo "====================================================================="
	echo " hwconfig -check --file [FILE NAME] 	for use a custome check"
	echo "====================================================================="
	exit 0;
fi


DMIfilecheck="`head ./var/dmidecode.list |grep "# dmidecode" | awk '{print $2}'`"
if [[ $Hwfilecheck != "dmidecode" ]];
then
	sudo sh -c "/usr/sbin/dmidecode  -t 0 -t 1 -t 3 -t 4 > ./var/dmidecode.list"
	sudo sh -c "/usr/sbin/dmidecode  -t 17 > ./var/dmidecode_meminfo.list"
fi


StampDate=`date +%Y-%m-%d`
MemCurrent=`free |grep Mem | awk '{print $3,"/",$2}'`
MemCurrentC=`free |grep Mem | awk '{print $2}'`

UnitSize=`cat ./var/dmidecode.list  | grep Height | awk '{print $1,$2,$3}' |sed -e 's/Height: //g' | sed -e 's/ U/U/g'`
BiosVendor=`cat ./var/dmidecode.list   | grep Vendor |awk -F ": " '{print $2}'`
BiosVerison=`cat ./var/dmidecode.list  | grep Version |awk -F ": " 'NR==1 {print $2}'`

RAMSize=`cat ./var/dmidecode_meminfo.list | grep Size |fgrep -v No | awk 'NR==1 {print $2$3}'`
RAMCap=`cat ./var/dmidecode_meminfo.list | grep Size |fgrep -v No | awk '{print NR}' |tail -1`
RAMinfo=$RAMSize" x "$RAMCap"ea"


Hostname="`hostname`"
System=`cat ./var/dmidecode.list |grep Product | awk '{print $3, $4,$5}' | sed 's/  //g'`
Processor=`/bin/cat /proc/cpuinfo | grep "model name" | sed -e 's/model name\t: //g' | awk '{print }'| tail -1`
Core=`/bin/cat /proc/cpuinfo | grep "model name" | sed -e 's/model name\t: //g' | awk '{print NR}'| tail -1`

Memory="$RAMinfo"

DiskA=`echo $Dkk`
DiskC=$Storage



Gateway=`cat /etc/sysconfig/network |grep GATE | sed -e 's/GATEWAY=//g'`

OS=`cat /etc/redhat-release`
BIOS="$BiosVendor $BiosVerison"
Kernel=`uname -a | awk '{print $1, $3, $4, $5, $14,"-", $7"/"$8"/"$11 }'`
KernelC=`uname -a | awk '{print $1, $3, $4, $5, $14}'`
PysicalDisk=`./bin/MegaCli  -AdpAllInfo -aALL |grep Disks |awk 'NR==1 {print $3}'`
#RAIDLevel=`./bin/MegaCli  -LDInfo -Lall -aALL |grep RAID | sed -e 's/RAID Level          : //g' |awk 'NR==1'`
RAIDLevel=`./bin/MegaCli -ShowSummary -aAll |grep "RAID Level" | awk '{print $4}'`
SerialNum="`sudo /usr/sbin/dmidecode -t system |grep Serial | awk '{print $3}'`"
PowerSupply=`cat ./var/dmidecode.list | grep "Number Of Power Cords:" |sed -e 's/\tNumber Of Power Cords: //g'`


if [[ $RAIDLevel = "Primary-1, Secondary-0, RAID Level Qualifier-0" ]];
then
	RAIDLevel="1"
elif [[ $RAIDLevel = "Primary-0, Secondary-0, RAID Level Qualifier-0" ]];
then
	RAIDLevel="0"
elif [[ $RAIDLevel = "Primary-5, Secondary-0, RAID Level Qualifier-3" ]];
then
        RAIDLevel="5"
elif [[ $RAIDLevel = "Primary-1, Secondary-3, RAID Level Qualifier-0" ]];
then
        RAIDLevel="10"
fi


if [[ $PysicalDisk = "" ]];
then
	PysicalDisk=`./bin/sas2ircu -0 display |grep PHY | awk '{print NR}' | tail -1`
	if [[ $PysicalDisk = "" ]];
	then
		PysicalDisk="N/A"
	fi
fi


if [[ $RAIDLevel = "" ]];
then
	RAIDLevel=`./bin/sas2ircu -0 display |grep level | awk '{print $4}' | sed -e 's/RAID//'`
	if [[ $RAIDLevel = "" ]];
	then
		RAIDLevel="N/A"
	fi
fi


if [[ $Gateway = "" ]];
then
	Gateway="N/A"
fi

Counter=0
IPList=(`grep IPADDR /etc/sysconfig/network-scripts/ifcfg-* | fgrep -v "lo:" | awk -F ":" '{print $2}' | sed -e 's/IPADDR\=//' -e 's/"//g' |fgrep -v "#"`)
DevList=(`grep IPADDR /etc/sysconfig/network-scripts/ifcfg-* | fgrep -v "lo:" |fgrep -v "#" | awk -F ":" '{print $1}' | awk -F "ifcfg-" '{print $2}'`)
DevCount=${#IPList[@]}
	while [[ $Counter -lt $DevCount ]]
	do
		DeviceMask[$Counter]=`ifconfig ${DevList[$Counter]} | grep ${IPList[$Counter]} | awk '{print $4}' | sed -e 's/Mask://'`		
		Result[$Counter]=`echo -e "Network "$Counter": \t ${DevList[$Counter]}=${IPList[$Counter]} \t\t Netmask=${DeviceMask[$Counter]}"`
		Net_mask[$Counter]=${DeviceMask[$Counter]}
		let Counter=Counter+1

	done


Gateway=`echo $Gateway | sed -e 's/\"//g'`


#for the data insert to the database
if [[ $OptionV = "-c" ]]
then
	echo "| Hostname: $Hostname | OS: $OS | CPU: $Processor x $Core(Core) | System: $System  | UnitSize: $UnitSize | Memory: $MemCurrentC ($Memory) | Disk size: $DiskA | Disk Qtty.: $PysicalDisk | Disk type:  | Storage: $DiskC | RAID: $RAIDLevel | Owner:  | Group: | Property: | Service: | Int.Switch: | Ext.Switch: | Rack: | IDC: | Network 0: ${DevList[0]} ${IPList[0]} | Netmask 0: ${Net_mask[0]} | Network 1: ${DevList[1]} ${IPList[1]} | Netmask 1: ${Net_mask[1]} | Gateway: $Gateway | RAC IP: | Serial: $SerialNum  | BIOS: $BIOS | Enterd: | Kernel: $KernelC | Update: $StampDate| @END@" | sed -e 's/\\t\\t//g' | sed -e "s/'//g" |  sed -e "s/\"//g"

#for the Network check
elif [[ $OptionV = "-net" ]]
then
	echo " "
	echo " [ Show the NIC status ]"
	/sbin/ip -s -s link show
	echo " "

	echo " "
	echo " [ Show the route status ]"
	/sbin/ip route list
	echo " "

	echo " "
	echo " [ Show the resolv.conf ]"


	name1=`cat /etc/resolv.conf | grep nameserver | head -1 | grep "$nameserver1" | awk '{print $2}'`
	name2=`cat /etc/resolv.conf | grep nameserver | tail -1 | grep "$nameserver2" | awk '{print $2}'`
		if [[ $name1 != "" ]]
		then
			echo "1st Name server is $name1 - Ok [o]"
		else
			echo "1st Name server is `cat /etc/resolv.conf | grep nameserver | head -1 | awk '{print $2}'` - Not ok [x]"
		fi

		if [[ $name2 != "" ]]
		then
			echo "2nd Name server is $name2 - Ok [o]"
		else
			echo "2nd Name server is `cat /etc/resolv.conf | grep nameserver | tail -1 | awk '{print $2}'` - Not ok [x]"
		fi


	echo " "

	echo " "
	echo " [ Check the loopback ]"
	Loopback=`/sbin/ip addr show | grep lo:0`
		if [[ $Loopback = "" ]]
		then 
			echo "== This server has not loopback.. (lo:0) =="
		else
			echo $Loopback
		fi
	echo " "

#for the system check list
elif [[ $OptionV = "-check" ]]
then
	File_name="./var/checklist.txt"
	
		if [[ $OptionSub = "--file" ]]
		then
			File_name="$3"
			if [[ $File_name = "" ]]
			then
				echo " "
				echo " --- Dose not exist the file name. ---"
				exit 0;
			fi

		fi


	Ok_="Ok - o"
	#Not_="\e[5;32;40m $Not_ \e[m\n"
	Not_="Not ok - x"

	divider="==================================="
	divider=$divider$divider$divider$divider$divider

	header="\n %-35s %-32s %-32s %12s\n"
	format=" %-35s %-32s %-32s %12s\n"
	width=120

	printf "%$width.${width}s" "$divider"
	printf "$header" "Configuration" "Target" "Current" "Result"
	printf "%$width.${width}s\n" "$divider"



	Counter=1
	LineVar="egrep -v \"^#\"  $File_name | egrep -v \"^$\""
	LineNum=`eval $LineVar |awk '{print NR}' | tail -1`
	#LineNum=`egrep -v "^#"  $File_name | egrep -v "^$" |awk '{print NR}' | tail -1`

		while [[ $Counter -le $LineNum ]]
		do
			#LineSort=`cat ./$File_name | egrep -v "^#" | awk NR==$Counter`
			LineSort_Var1=`eval $LineVar | awk NR==$Counter | awk -F ',' '{print $1}'`
			LineSort_Var2=`eval $LineVar | awk NR==$Counter | awk -F ',' '{print $2}'`
			LineSort_Var3=`eval $LineVar | awk NR==$Counter | awk -F ',' '{print $3}'`

			TargetVar_ID=$LineSort_Var1
			TargetVar=$LineSort_Var2
			LineBreak=`echo $LineSort_Var1 |grep "^-"`
				if [[ $LineBreak != "" ]]
				then
					printf "%$width.${width}s\n\n" "$divider"
					printf "$format" "$LineSort_Var1"
					printf "%$width.${width}s" "$divider"
					printf "$header" "Configuration" "Target" "Current" "Result"
					printf "%$width.${width}s\n" "$divider"
					let Counter=Counter+1
				else
					if [[ $LineSort_Var3 = "" ]]
					then
						echo " "
						echo "| `eval $LineVar | awk NR==$Counter` | - Not enough a Data for checking: Line. $Counter"
						exit 0;
					fi
				ResultVar=`eval echo $LineSort_Var3`
					if [[ $ResultVar = "" ]]
					then
						ResultVar="Not exist"
					fi	
	
					if [[ $ResultVar = $TargetVar ]]
					then
						printf "$format" "$TargetVar_ID" "$TargetVar" "$ResultVar" "$Ok_"
					else
						printf '\e[1;30m'
						printf "$format" "$TargetVar_ID" "$TargetVar" "$ResultVar" "$Not_" 
						printf '\e[0m'
					fi
				let Counter=Counter+1	
				fi
		done
	printf "%$width.${width}s\n" "$divider"


else
	echo -e ""
	echo -e "Hostname: \t $Hostname"
	echo -e "Summary: \t $System, $Processor x $Core(Core), $MemCurrent, $Memory, $UnitSize"
	echo -e "System: \t $System | Chassis: $UnitSize"

	echo -e "Processors: \t $Processor x $Core(Core)"
	echo -e "Memory: \t $MemCurrent ($Memory)"

	echo -e "Disk: \t\t $DiskA"
	echo -e "Storage: \t $DiskC"
	echo -e "RAID Level: \t $RAIDLevel" 
	echo -e "RAID Disks: \t $PysicalDisk"

	Counter=0
	while [[ $Counter -lt $DevCount ]]
	do
		echo -e "${Result[$Counter]}" 
		let Counter=Counter+1
	done

	echo -e "Gateway: \t $Gateway"
	
	echo -e "OS: \t\t $OS"
	echo -e "BIOS: \t\t $BIOS"
	echo -e "HW Serial: \t $SerialNum"
	echo -e "Kernel: \t $Kernel"
	echo -e "PowerSupply: \t $PowerSupply onlined power cord(s) "
fi

